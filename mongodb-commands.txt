
 to see the databases present in my system
--- show dbs


to create a new db / switch to different db
--- use database-name

to create a new collection 
--- db.createCollection('name')

to view the collection in a database
---show collections

to create a new document/record/data
--- db.colletionName.insertOne({})

to create multiple docs/records at once
---db.collectionName.insertMany([{},{},{}])

to view all data in a collection
---db.collectionName.find()

to view data based on filter/condition
---db.collectionName.find({prop:value})

to update a document/record
---db.collectionName.updateOne({name:'ANT Mouse'},{$set:{category:'Electronics'}})

---db.collectionName.updateMany({category:'Electronics'},{$set:{price:10000}})


to delete a record/doc
---db.collectionname.deleteOne({property:value})
=> deleteOne deletes the first value
---deleteMany => deletes the all the values satisfying the filter condition

to completely clear your collection
---db.collectionname.deleteMany({}) => {} rep everything in the collection


Reading Datausing different query operators

RELATIONAL or comparison ops

$eq = equals

--db.coll.find({brand:{$eq:'Apple'}})

$gt = greater than

--db.coll.find({price:{$gt:1000},brand:'Apple'})

$gte - greater than or equal to
----db.coll.find({price:{$gte:1000}})

$lt - less than
--- db.coll.find({rating:{$lt:4}})

$lte - less than or equal to

--- db.coll.find({rating:{$lte:4}})

$in - used to specify multiple values for a single field

use products; 
=> products is the collectionName

---db.products.find({brand:{$in:['Apple','LED Lights','Golden']}})

$nin

---db.products.find({brand:{$nin:['Apple','LED Lights','Golden']}})






LOGICAL operators

$and - where all condition should be true
---db.products.find({$and:[{price:{$gte:500}},{price:{$lte:1000}}]})

--db.products.find({price:{$gte:500,$lte:1000}})

$or - even if one is true the whole condition will be considered true

---db.products.find({$or:[{price:{$lte:50}},{brand:'Apple'}]})


PROJECTION - selecting specific properties to view

---db.products.find({},{title:1,description:1})

forcing for not including id
--- db.products.find({},{_id:false,title:true,description:true})



LIMIT

---db.products.find().limit(10)

LIMIT AND SKIP
---db.products.find().limit(x).skip(y)
=> skips the first y values and displays the next x values



SORT

---db.products.find().sort({price:-1})
 1 => ascending
 -1 => descending


// Validation 


db.createCollection("students",{
    validator:{
        $jsonSchema:{
            bsonType:"object",
            required:["name","jod","age"],
            properties:{
                name:{
                    bsonType:"string",
                    description:"Name should be a string",
                    // description is the error message displayed if any error occurs
                    maxLength:30
                },
                age:{
                    bsonType:"int",
                    description:"Age Should be a number",
                    minimum:12,
                    maximum:50
                },
                jod:{
                    bsonType:"date",
                    description:"jod should be date"
                },
                course:{
                    bsonType:"array",
                    items:{
                        bsonType:"string"
                    }, // collection of strings
                    description:"Course should be a string"
                }
            }
        }
    
    }
    
})


db.students.insertOne({name:"Ajay",age:18,jod:new Date ("2023-7-10"), course:["C++,C,Python"] })


// aggregation 

// find document based on category 
// group it
//sort it
//limit it

// grouping 

find({}).sort({}).limit(2)

db.products.aggregate([
    {
        $match:{$and:[{},{},{}]}
    },
    {
        $group:{_id:"$category",avgPrice:{$avg:'$price'}}
    },
    {
        $sort:{'avgPrice':-1}
    },
    {
        $limit:2
    }
])
